package conf

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"time"

	"gopkg.in/yaml.v2"
)

// Generated by https://quicktype.io

type Conf struct {
	LineToken              string        `yaml:"line_token"`
	BaseURL                string        `yaml:"base_url"`
	IntervalTime           time.Duration `yaml:"interval_time"`
	AuthenticationEndpoint Endpoint      `yaml:"authentication_endpoint"`
	PropertyEndpoint       Endpoint      `yaml:"property_endpoint"`
	Endpoints              []Endpoint    `yaml:"endpoints"`
}

type Endpoint struct {
	Path                 string                 `yaml:"path"`
	Method               string                 `yaml:"method"`
	Body                 map[string]interface{} `yaml:"body"`
	Query                map[string]interface{} `yaml:"query"`
	TimeLimit            int64                  `yaml:"time_limit"`
	RequiredProperty     bool                   `yaml:"required_property"`
	RequiredPropertyUnit bool                   `yaml:"required_property_unit"`
	Response             map[string]interface{} `yaml:"response"`
}

func getFile(fileName string) ([]byte, error) {

	file, err := ioutil.ReadFile(fileName)
	if err == nil {
		return file, nil
	}

	dir, err := filepath.Abs(filepath.Dir(os.Args[0]))
	if err != nil {
		log.Printf("dir err   #%v", err)
		return nil, err
	}

	file, err = ioutil.ReadFile(dir + "/" + fileName)
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
		return nil, err
	}

	return file, nil

}

func (c *Conf) GetConf(path string) *Conf {

	yamlFile, err := getFile(path)
	if err != nil {
		log.Fatalf("No yamlFile: %v", err)
	}

	err = yaml.Unmarshal(yamlFile, c)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	return c
}
